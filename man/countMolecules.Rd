% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/countMolecules.R
\name{countMolecules}
\alias{countMolecules}
\title{Count molecules per region of interest (e.g., cell)}
\usage{
countMolecules(
  me,
  boundaries_assay = "cell",
  segmentation_info = "boundaries",
  molecules_assay = "detected"
)
}
\arguments{
\item{me}{MoleculeExperiment object containing both the transcript data as
well as the boundaries data. I.e., the "molecules" and "boundaries" slots
need to be filled. See MoleculeExperiment() for more information.}

\item{boundaries_assay}{Character string naming the list of the boundaries
slot from which boundary information should be retrieved from.
For example, for counting transcripts per cell, the list containing the cell
boundaries (e.g., "cell") should be selected.}

\item{segmentation_info}{Character string specifying the type of segmentation
information available. Can be either "boundaries" or "masks". Currently,
only the "boundaries" information is supported.}

\item{molecules_assay}{Character string naming the list of the molecules slot
from which transcript information should be retrieved from.
The default is the detected transcript data that is read in when creating a
MoleculeExperiment object. It is possible to change it to another mode, e.g.,
"high_threshold" will access the transcript information that has been stored
in the "high_threshold" element of the list in the molecules slot.}
}
\value{
A SpatialExperiment object derived from a MoleculeExperiment object.
}
\description{
This function takes the information from the molecules and boundaries slot,
and counts the molecules per region of interest. Its input is a
MoleculeExperiment object, and its output a SpatialExperiment object.
That way, if one is interested in doing downstream analyses at the cell
level, one can do so.
}
\examples{
repo_dir <- system.file("extdata", package = "MoleculeExperiment")

me <- readXenium(repo_dir,
                  n_samples = 2,
                  keep_cols = "essential")

spe <- countMolecules(me)
spe
}
