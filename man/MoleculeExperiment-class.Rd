% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllClasses.R, R/getters.R, R/other_methods.R,
%   R/setters.R
\docType{class}
\name{MoleculeExperiment}
\alias{MoleculeExperiment}
\alias{MoleculeExperiment-class}
\alias{molecules,MoleculeExperiment-method}
\alias{boundaries,MoleculeExperiment-method}
\alias{features,MoleculeExperiment-method}
\alias{segmentIDs,MoleculeExperiment-method}
\alias{strMolecules,MoleculeExperiment-method}
\alias{strBoundaries,MoleculeExperiment-method}
\alias{nFeatures,MoleculeExperiment-method}
\alias{nTranscripts,MoleculeExperiment-method}
\alias{molecules<-,MoleculeExperiment-method}
\alias{boundaries<-,MoleculeExperiment-method}
\title{MoleculeExperiment class: An S4 class container to store imaging-based
spatial transcriptomics data.}
\usage{
\S4method{molecules}{MoleculeExperiment}(object, assay_name = "detected", flatten = FALSE)

\S4method{boundaries}{MoleculeExperiment}(object, assay_name = NULL, flatten = FALSE)

\S4method{features}{MoleculeExperiment}(object, assay_name = "detected")

\S4method{segmentIDs}{MoleculeExperiment}(object, assay_name = NULL)

\S4method{strMolecules}{MoleculeExperiment}(object)

\S4method{strBoundaries}{MoleculeExperiment}(object)

\S4method{nFeatures}{MoleculeExperiment}(object, assay_name = "detected", per_sample = FALSE)

\S4method{nTranscripts}{MoleculeExperiment}(object, assay_name = "detected", per_sample = FALSE)

\S4method{molecules}{MoleculeExperiment}(object, assay_name = NULL) <- value

\S4method{boundaries}{MoleculeExperiment}(object, assay_name = NULL) <- value
}
\arguments{
\item{assay_name}{Name of the assay from which to retrieve data in the ME
list.}

\item{value}{New value to be added to the slot and assay of interest.}
}
\description{
This class enables the analysis of imaging-based ST data at the molecule
level, and standardises data across vendors, which hopefully facilitates
ST data integration and comparison.
}
\section{Slots}{

\describe{
\item{\code{molecules}}{Slot containing information about the detected transcripts.
This slot is designed as a list of lists, where each sample contains a list
of tibbles with information for each gene. The basic information required
for this slot are the gene names of the transcripts, as well as their x and
y locations.}

\item{\code{boundaries}}{Slot containing the boundaries defining each segmented cell.
The slot is designed as a list of lists, where each sample contains a list
of tibbles for each cell, consisting of the x and y coordinates of the
polygon vertices defining the cell boundary.}
}}

\section{Creating an ME object}{
NA
}

\section{Methods}{
NA
}

\examples{

   molecules_df <- data.frame(
       sample_id = rep(c("sample1", "sample2"), times = c(30, 20)),
       features = rep(c("gene1", "gene2"), times = c(20, 30)),
       x_coords = runif(50),
       y_coords = runif(50)
   )
   boundaries_df <- data.frame(
       sample_id = rep(c("sample1", "sample2"), times = c(16, 6)),
       cell_id = rep(c("cell1", "cell2", "cell3", "cell4",
                       "cell1", "cell2"),
                     times = c(4, 4, 4, 4, 3, 3)),
       vertex_x = rnorm(22),
       vertex_y = rnorm(22)
   )
   molecules_ls <- dataframeToMEList(molecules_df,
                                     df_type = "transcripts",
                                     assay_name = "detected",
                                     sample_col = "sample_id",
                                     factor_col = "features",
                                     x_col = "x_coords",
                                     y_col = "y_coords")

   boundaries_ls <- dataframeToMEList(boundaries_df,
                                      df_type = "boundaries",
                                      assay_name = "cell",
                                      sample_col = "sample_id",
                                      factor_col = "cell_id",
                                      x_col = "vertex_x",
                                      y_col = "vertex_y")

   toy_me <- MoleculeExperiment(molecules = molecules_ls,
                                boundaries = boundaries_ls)

   toy_me
}
