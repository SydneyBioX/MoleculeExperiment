[{"path":"https://sydneybiox.github.io/MoleculeExperiment/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 MoleculeExperiment authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/articles/MoleculeExperiment.html","id":"moleculeexperiment","dir":"Articles","previous_headings":"","what":"MoleculeExperiment","title":"An introduction to the MoleculeExperiment Class","text":"R package MoleculeExperiment contains functions create work objects new MoleculeExperiment class. introduce class analysing molecule-based spatial transcriptomics data (e.g., Xenium 10X, CosMx SMI Nanostring, Merscope Vizgen, among others).","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/articles/MoleculeExperiment.html","id":"why-the-moleculeexperiment-class","dir":"Articles","previous_headings":"MoleculeExperiment","what":"Why the MoleculeExperiment class?","title":"An introduction to the MoleculeExperiment Class","text":"goal MoleculeExperiment class : 1. Enable analysis spatial transcriptomics (ST) data molecule level, independent aggregating cell tissue level. 2. Standardise molecule-based ST data across vendors, hopefully facilitate comparison different data sources common analytical visualisation workflows. 3. Enable aggregation SpatialExperiment object given combinations molecules segmentation boundaries.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/articles/MoleculeExperiment.html","id":"installation","dir":"Articles","previous_headings":"MoleculeExperiment","what":"Installation","title":"An introduction to the MoleculeExperiment Class","text":"latest release MoleculeExperiment can installed using:","code":"if (!require(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") } BiocManager::install(\"MoleculeExperiment\")"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/articles/MoleculeExperiment.html","id":"minimal-example","dir":"Articles","previous_headings":"","what":"Minimal example","title":"An introduction to the MoleculeExperiment Class","text":"Load required libraries. Create MoleculeExperiment object example Xenium data, taken small patch. Use standardised data object molecule-level analyses. example, plot simple digital -situ, cell boundaries overlaid.  Finally, also possible go MoleculeExperiment object SpatialExperiment object. enables transition molecule-level analysis cell-level analysis already existing tools.","code":"library(MoleculeExperiment) library(ggplot2) repoDir <- system.file(\"extdata\", package = \"MoleculeExperiment\") repoDir <- paste0(repoDir, \"/xenium_V1_FF_Mouse_Brain\")  me <- readXenium(repoDir,   keepCols = \"essential\" ) me #> class:  MoleculeExperiment  #> 2 samples: sample1 sample2  #>  #> @molecules contents:  #> -detected assay: #> Location range across all samples in assay \"detected\": [4900,4919.98] x [6400.02,6420] #>  #> @boundaries contents: #> -cell: #> 7 unique segment IDs: 67500 67512 67515 67521 67527 ... ggplot_me() +   geom_polygon_me(me, assayName = \"cell\", fill = \"grey\") +   geom_point_me(me) +   # zoom in to selected patch area   coord_cartesian(     xlim = c(4900, 4919.98),     ylim = c(6400.02, 6420)   ) # transform ME to SPE object spe <- countMolecules(me) spe #> class: SpatialExperiment  #> dim: 178 14  #> metadata(0): #> assays(1): counts #> rownames(178): 2010300C02Rik Acsbg1 ... Zfp536 Zfpm2 #> rowData names(0): #> colnames(14): sample1.67500 sample1.67512 ... sample2.65070 #>   sample2.65071 #> colData names(4): sample_id cell_id x_location y_location #> reducedDimNames(1): spatial #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : x_location y_location #> imgData names(0):"},{"path":[]},{"path":[]},{"path":"https://sydneybiox.github.io/MoleculeExperiment/articles/MoleculeExperiment.html","id":"use-case-1-from-dataframes-to-me-object","dir":"Articles","previous_headings":"The ME object in detail > Constructing an ME object","what":"Use case 1: from dataframes to ME object","title":"An introduction to the MoleculeExperiment Class","text":"demonstrate work object toy data, representing scenario detected transcripts information boundary information already read R. requires standardisation data dataframeToMEList() function. flexibility arguments dataframeToMEList() enable creation standard object across dataframes comming different vendors molecule-based spatial transcriptomics technologies. Generate toy transcripts data.frame. Generate toy boundaries data.frame. Standardise transcripts dataframe list format. Standardise boundaries dataframe list format. Create object using MoleculeExperiment object constructor. Add boundaries external segmentation algorithm. example, use extent molecules generated toyME allign boundaries molecules. general, extent segmentation required alignment.","code":"moleculesDf <- data.frame(   sample_id = rep(c(\"sample1\", \"sample2\"), times = c(30, 20)),   features = rep(c(\"gene1\", \"gene2\"), times = c(20, 30)),   x_coords = runif(50),   y_coords = runif(50) ) head(moleculesDf) #>   sample_id features  x_coords  y_coords #> 1   sample1    gene1 0.2615549 0.6127784 #> 2   sample1    gene1 0.4994048 0.9694453 #> 3   sample1    gene1 0.4615036 0.8137619 #> 4   sample1    gene1 0.8741814 0.9110435 #> 5   sample1    gene1 0.8933214 0.6546609 #> 6   sample1    gene1 0.1535346 0.3729775 boundariesDf <- data.frame(   sample_id = rep(c(\"sample1\", \"sample2\"), times = c(16, 6)),   cell_id = rep(     c(       \"cell1\", \"cell2\", \"cell3\", \"cell4\",       \"cell1\", \"cell2\"     ),     times = c(4, 4, 4, 4, 3, 3)   ),   vertex_x = c(     0, 0.5, 0.5, 0,     0.5, 1, 1, 0.5,     0, 0.5, 0.5, 0,     0.5, 1, 1, 0.5,     0, 1, 0, 0, 1, 1   ),   vertex_y = c(     0, 0, 0.5, 0.5,     0, 0, 0.5, 0.5,     0.5, 0.5, 1, 1,     0.5, 0.5, 1, 1,     0, 1, 1, 0, 0, 1   ) ) head(boundariesDf) #>   sample_id cell_id vertex_x vertex_y #> 1   sample1   cell1      0.0      0.0 #> 2   sample1   cell1      0.5      0.0 #> 3   sample1   cell1      0.5      0.5 #> 4   sample1   cell1      0.0      0.5 #> 5   sample1   cell2      0.5      0.0 #> 6   sample1   cell2      1.0      0.0 moleculesMEList <- dataframeToMEList(moleculesDf,   dfType = \"molecules\",   assayName = \"detected\",   sampleCol = \"sample_id\",   factorCol = \"features\",   xCol = \"x_coords\",   yCol = \"y_coords\" ) str(moleculesMEList, max.level = 3) #> List of 1 #>  $ detected:List of 2 #>   ..$ sample1:List of 2 #>   .. ..$ gene1: tibble [20 × 2] (S3: tbl_df/tbl/data.frame) #>   .. ..$ gene2: tibble [10 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ sample2:List of 1 #>   .. ..$ gene2: tibble [20 × 2] (S3: tbl_df/tbl/data.frame) boundariesMEList <- dataframeToMEList(boundariesDf,   dfType = \"boundaries\",   assayName = \"cell\",   sampleCol = \"sample_id\",   factorCol = \"cell_id\",   xCol = \"vertex_x\",   yCol = \"vertex_y\" ) str(boundariesMEList, 3) #> List of 1 #>  $ cell:List of 2 #>   ..$ sample1:List of 4 #>   .. ..$ cell1: tibble [4 × 2] (S3: tbl_df/tbl/data.frame) #>   .. ..$ cell2: tibble [4 × 2] (S3: tbl_df/tbl/data.frame) #>   .. ..$ cell3: tibble [4 × 2] (S3: tbl_df/tbl/data.frame) #>   .. ..$ cell4: tibble [4 × 2] (S3: tbl_df/tbl/data.frame) #>   ..$ sample2:List of 2 #>   .. ..$ cell1: tibble [3 × 2] (S3: tbl_df/tbl/data.frame) #>   .. ..$ cell2: tibble [3 × 2] (S3: tbl_df/tbl/data.frame) toyME <- MoleculeExperiment(   molecules = moleculesMEList,   boundaries = boundariesMEList ) toyME #> class:  MoleculeExperiment  #> 2 samples: sample1 sample2  #>  #> @molecules contents:  #> -detected assay: #> Location range across all samples in assay \"detected\": [0.01,0.99] x [0,0.98] #>  #> @boundaries contents: #> -cell: #> 3 unique segment IDs: cell1 cell2 cell3 cell4 ... repoDir <- system.file(\"extdata\", package = \"MoleculeExperiment\") segMask <- paste0(repoDir, \"/BIDcell_segmask.tif\") boundaries(toyME, \"BIDcell_segmentation\") <- readSegMask(   extent(toyME), # use the molecule extent to define the boundary extent   path = segMask, assayName = \"BIDcell_segmentation\",   sample_id = \"sample1\", background_value = 0 )  toyME #> class:  MoleculeExperiment  #> 2 samples: sample1 sample2  #>  #> @molecules contents:  #> -detected assay: #> Location range across all samples in assay \"detected\": [0.01,0.99] x [0,0.98] #>  #> @boundaries contents: #> -cell: #> 3 unique segment IDs: cell1 cell2 cell3 cell4 ... #> -BIDcell_segmentation: #> 89 unique segment IDs: 1 2 3 4 5 6 ..."},{"path":"https://sydneybiox.github.io/MoleculeExperiment/articles/MoleculeExperiment.html","id":"use-case-2-from-machines-output-directory-to-me-object","dir":"Articles","previous_headings":"The ME object in detail > Constructing an ME object","what":"Use case 2: from machine’s output directory to ME object","title":"An introduction to the MoleculeExperiment Class","text":"MoleculeExperiment package also provides functions directly work directories containing output files commonly used technologies. especially useful work data multiple samples. provide convenience functions read data Xenium (10X Genomics), CosMx (Nanostring) Merscope (Vizgen). readXenium() standardises transcript boundary information column names consistent across technologies handling objects. addition, readXenium() enables user decide want keep data vendor-specific (e.g., column qv score), columns interest, essential columns. latter refers feature names locations detected transcripts, segment ids boundary locations segmentation results. CosMx Merscope data provide convenience functions standardise raw transcripts data MoleculeExperiment object additionally read boundaries included standard data releases.","code":"repoDir <- system.file(\"extdata\", package = \"MoleculeExperiment\") repoDir <- paste0(repoDir, \"/xenium_V1_FF_Mouse_Brain\")  me <- readXenium(repoDir,   keepCols = \"essential\",   addBoundaries = \"cell\" ) me #> class:  MoleculeExperiment  #> 2 samples: sample1 sample2  #>  #> @molecules contents:  #> -detected assay: #> Location range across all samples in assay \"detected\": [4900,4919.98] x [6400.02,6420] #>  #> @boundaries contents: #> -cell: #> 7 unique segment IDs: 67500 67512 67515 67521 67527 ... repoDir <- system.file(\"extdata\", package = \"MoleculeExperiment\") repoDir <- paste0(repoDir, \"/nanostring_Lung9_Rep1\")  meCosmx <- readCosmx(repoDir,   keepCols = \"essential\",   addBoundaries = \"cell\" ) meCosmx #> class:  MoleculeExperiment  #> 2 samples: sample_1 sample_2  #>  #> @molecules contents:  #> -detected assay: #> Location range across all samples in assay \"detected\": [924.01,3002] x [26290,26398] #>  #> @boundaries contents: #> -cell: #> 98 unique segment IDs: 1 2 3 4 5 6 ... repoDir <- system.file(\"extdata\", package = \"MoleculeExperiment\") repoDir <- paste0(repoDir, \"/vizgen_HumanOvarianCancerPatient2Slice2\") meMerscope <- readMerscope(repoDir,   keepCols = \"essential\",   addBoundaries = \"cell\" ) meMerscope #> class:  MoleculeExperiment  #> 1 samples: vizgen_HumanOvarianCancerPatient2Slice2  #>  #> @molecules contents:  #> -detected assay: #> Location range across all samples in assay \"detected\": [10219.02,10386.83] x [8350.93,8395.3] #>  #> @boundaries contents: #> -cell: #> 24 unique segment IDs: 45862 45865 45872 45873 45882 45887 ..."},{"path":"https://sydneybiox.github.io/MoleculeExperiment/articles/MoleculeExperiment.html","id":"me-object-structure","dir":"Articles","previous_headings":"The ME object in detail","what":"ME object structure","title":"An introduction to the MoleculeExperiment Class","text":"MoleculeExperiment object contains @molecules slot optional @boundaries slot. slots hierarchical list structure consists nested list, ultimately ending data.frame/tibble. Traditional rectangular data structures, like dataframes, redundantly store gene names sample IDs millions transcripts. contrast, data list enables us avoid redundancy work objects smaller size.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/articles/MoleculeExperiment.html","id":"molecules-slot","dir":"Articles","previous_headings":"The ME object in detail > ME object structure","what":"molecules slot","title":"An introduction to the MoleculeExperiment Class","text":"@molecules slot contains molecule-level information. essential data contains feature name (e.g., gene names) x y locations detected molecules (e.g., transcripts), sample. Nevertheless, user can also decide keep molecule metadata (e.g., subcellular location: nucleus/cytoplasm). nested list molecules slot following hierarchical structure: “assay name” > “sample ID” > “feature name” > dataframe/tibble X Y locations (additional columns interest).","code":"showMolecules(me) #> List of 1 #>  $ detected:List of 2 #>   ..$ sample1:List of 137 #>   .. ..$ 2010300C02Rik        : tibble [11 × 2] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Acsbg1               : tibble [6 × 2] (S3: tbl_df/tbl/data.frame) #>   .. .. [list output truncated] #>   ..$ sample2:List of 143 #>   .. ..$ 2010300C02Rik: tibble [9 × 2] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Acsbg1       : tibble [10 × 2] (S3: tbl_df/tbl/data.frame) #>   .. .. [list output truncated]"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/articles/MoleculeExperiment.html","id":"boundaries-slot","dir":"Articles","previous_headings":"The ME object in detail > ME object structure","what":"boundaries slot","title":"An introduction to the MoleculeExperiment Class","text":"@boundaries slot contains information segmentation analyses (e.g., cell boundaries, nucleus boundaries). nested list boundaries slot following hierarchical structure: “assay name” > “sample ID” > “segment ID” > dataframe/tibble vertex coordinates defining boundaries segment. example, boundary information cells, assay name can set “cell”; “nucleus” one using nucleus boundaries.","code":"showBoundaries(me) #> List of 1 #>  $ cell:List of 2 #>   ..$ sample1:List of 5 #>   .. ..$ 67500: tibble [13 × 2] (S3: tbl_df/tbl/data.frame) #>   .. ..$ 67512: tibble [13 × 2] (S3: tbl_df/tbl/data.frame) #>   .. .. [list output truncated] #>   ..$ sample2:List of 9 #>   .. ..$ 65043: tibble [13 × 2] (S3: tbl_df/tbl/data.frame) #>   .. ..$ 65044: tibble [13 × 2] (S3: tbl_df/tbl/data.frame) #>   .. .. [list output truncated]"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/articles/MoleculeExperiment.html","id":"methods","dir":"Articles","previous_headings":"","what":"Methods","title":"An introduction to the MoleculeExperiment Class","text":"introduce basic methods access manipulate data object, .e., getters setters, respectively.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/articles/MoleculeExperiment.html","id":"getters","dir":"Articles","previous_headings":"Methods","what":"Getters","title":"An introduction to the MoleculeExperiment Class","text":"main getters molecules() boundaries(). NOTE: output methods nested list, can large screen. Thus, getters used wanting work data. quickly view slot contents, use showMolecules() showBoundaries() instead. ease use, getters arguments enable transformation data nested list format data.frame format. getters include: features() segmentIDs().","code":"# NOTE: output not shown as it is too large # access molecules slot molecules(me) # access cell boundary information in boundaries slot boundaries(me, \"cell\") molecules(me, assayName = \"detected\", flatten = TRUE) #> # A tibble: 1,739 × 4 #>    x_location y_location feature_id    sample_id #>  *      <dbl>      <dbl> <chr>         <chr>     #>  1      4918.      6411. 2010300C02Rik sample1   #>  2      4901.      6417. 2010300C02Rik sample1   #>  3      4901.      6417. 2010300C02Rik sample1   #>  4      4910.      6417. 2010300C02Rik sample1   #>  5      4908.      6413. 2010300C02Rik sample1   #>  6      4911.      6407. 2010300C02Rik sample1   #>  7      4915.      6411. 2010300C02Rik sample1   #>  8      4916.      6412. 2010300C02Rik sample1   #>  9      4901.      6415. 2010300C02Rik sample1   #> 10      4906.      6417. 2010300C02Rik sample1   #> # ℹ 1,729 more rows boundaries(me, assayName = \"cell\", flatten = TRUE) #> # A tibble: 182 × 4 #>    x_location y_location segment_id sample_id #>  *      <dbl>      <dbl> <chr>      <chr>     #>  1      4905.      6400. 67500      sample1   #>  2      4899.      6401. 67500      sample1   #>  3      4894.      6408. 67500      sample1   #>  4      4890.      6418. 67500      sample1   #>  5      4887.      6423. 67500      sample1   #>  6      4887.      6425. 67500      sample1   #>  7      4890.      6427. 67500      sample1   #>  8      4891.      6427. 67500      sample1   #>  9      4894.      6426. 67500      sample1   #> 10      4908.      6421. 67500      sample1   #> # ℹ 172 more rows # get initial features in sample 1 head(features(me)[[1]]) #> [1] \"2010300C02Rik\" \"Acsbg1\"        \"Adamts2\"       \"Adamtsl1\"      #> [5] \"Angpt1\"        \"Aqp4\" segmentIDs(me, \"cell\") #> $sample1 #> [1] \"67500\" \"67512\" \"67515\" \"67521\" \"67527\" #>  #> $sample2 #> [1] \"65043\" \"65044\" \"65051\" \"65055\" \"65063\" \"65064\" \"65067\" \"65070\" \"65071\""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/articles/MoleculeExperiment.html","id":"setters","dir":"Articles","previous_headings":"Methods","what":"Setters","title":"An introduction to the MoleculeExperiment Class","text":"Main setters include molecules<- boundaries<-. example, boundaries<- one can add new segmentation assay information boundaries slot. demonstrate nucleus boundaries. additional boundaries can accessed, e.g. visualisation.","code":"repoDir <- system.file(\"extdata\", package = \"MoleculeExperiment\") repoDir <- paste0(repoDir, \"/xenium_V1_FF_Mouse_Brain\") nucleiMEList <- readBoundaries(   dataDir = repoDir,   pattern = \"nucleus_boundaries.csv\",   segmentIDCol = \"cell_id\",   xCol = \"vertex_x\",   yCol = \"vertex_y\",   keepCols = \"essential\",   boundariesAssay = \"nucleus\",   scaleFactorVector = 1 )  boundaries(me, \"nucleus\") <- nucleiMEList me # note the addition of the nucleus boundaries to the boundaries slot #> class:  MoleculeExperiment  #> 2 samples: sample1 sample2  #>  #> @molecules contents:  #> -detected assay: #> Location range across all samples in assay \"detected\": [4900,4919.98] x [6400.02,6420] #>  #> @boundaries contents: #> -cell: #> 7 unique segment IDs: 67500 67512 67515 67521 67527 ... #> -nucleus: #> 5 unique segment IDs: 67500 67512 67515 67521 67527 ... ggplot_me() +   # add cell segments and colour by cell id   geom_polygon_me(me, byFill = \"segment_id\", colour = \"black\", alpha = 0.1) +   # add molecule points and colour by feature name   geom_point_me(me, byColour = \"feature_id\", size = 0.1) +   # add nuclei segments and colour the border with red   geom_polygon_me(me, assayName = \"nucleus\", fill = NA, colour = \"red\") +   # zoom in to selected patch area   coord_cartesian(xlim = c(4900, 4919.98), ylim = c(6400.02, 6420))"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/articles/MoleculeExperiment.html","id":"from-moleculeexperiment-to-spatialexperiment","dir":"Articles","previous_headings":"","what":"From MoleculeExperiment to SpatialExperiment","title":"An introduction to the MoleculeExperiment Class","text":"one interested continuing downstream analysis cell-level, MoleculeExperiment package also provides convenience function, countMolecules(), enables transition MoleculeExperiment object SpatialExperiment object. functionality, possible use already existing methods cell-level data analysis.","code":"spe <- countMolecules(me, boundariesAssay = \"nucleus\") spe #> class: SpatialExperiment  #> dim: 178 10  #> metadata(0): #> assays(1): counts #> rownames(178): 2010300C02Rik Acsbg1 ... Zfp536 Zfpm2 #> rowData names(0): #> colnames(10): sample1.67500 sample1.67512 ... sample2.65063 #>   sample2.65064 #> colData names(4): sample_id cell_id x_location y_location #> reducedDimNames(1): spatial #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : x_location y_location #> imgData names(0):"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/articles/MoleculeExperiment.html","id":"case-study-moleculeexperiment-and-napari","dir":"Articles","previous_headings":"","what":"Case Study: MoleculeExperiment and napari","title":"An introduction to the MoleculeExperiment Class","text":"Load demonstration data, includes molecules 2 genes. Read virtual dissection CSV file, exported napari (screenshot), morphology image. can plot resulting MoleculeExperiment using following code.  Now added virtual dissection boundaries, can use countMolecules generate psuedobulk expressions regions.","code":"data(small_me) bds_colours <- setNames(   c(\"#aa0000ff\", \"#ffaaffff\"),   c(\"Region 1\", \"Region 2\") )  file_path <- system.file(\"extdata/tiny_brain_shape2.csv\", package = \"MoleculeExperiment\")  bds_shape_raw <- read.csv(file = file_path, header = TRUE) bds_shape_raw$sample_id <- \"xenium_tiny_subset\" bds_shape_raw$regionName <- names(bds_colours)[bds_shape_raw$index + 1]  bds_shape <- dataframeToMEList(bds_shape_raw,   dfType = \"boundaries\",   assayName = \"virtualDissection\",   sampleCol = \"sample_id\",   factorCol = \"regionName\",   xCol = \"axis.1\",   yCol = \"axis.0\",   scaleFactor = 0.2125 )  boundaries(small_me, \"virtualDissection\") <- bds_shape g <- ggplot() +   geom_point_me(     small_me,     assayName = \"detected\", byColour = \"feature_id\", size = 0.2   ) +   geom_polygon_me(     small_me,     assayName = \"cell\", fill = NA, colour = \"grey50\", size = 0.1   ) +   geom_polygon_me(     small_me,     assayName = \"nucleus\", fill = NA, colour = \"black\", size = 0.1   ) +   geom_polygon_me(     small_me,     assayName = \"virtualDissection\", byFill = \"segment_id\", alpha = 0.3   ) +   scale_y_reverse() +   theme_classic() +   theme(axis.text = element_blank()) +   theme(axis.ticks = element_blank()) +   coord_fixed() +   scale_fill_manual(values = bds_colours) +   NULL g spe <- countMolecules(   small_me, boundariesAssay = \"virtualDissection\") spe"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/articles/MoleculeExperiment.html","id":"sessioninfo","dir":"Articles","previous_headings":"","what":"SessionInfo","title":"An introduction to the MoleculeExperiment Class","text":"","code":"sessionInfo() #> R version 4.3.1 (2023-06-16) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: EndeavourOS #>  #> Matrix products: default #> BLAS:   /usr/lib/libblas.so.3.11.0  #> LAPACK: /usr/lib/liblapack.so.3.11.0 #>  #> locale: #>  [1] LC_CTYPE=en_AU.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_AU.UTF-8        LC_COLLATE=en_AU.UTF-8     #>  [5] LC_MONETARY=en_AU.UTF-8    LC_MESSAGES=en_AU.UTF-8    #>  [7] LC_PAPER=en_AU.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_AU.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Australia/Sydney #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.4.3            MoleculeExperiment_1.1.3 BiocStyle_2.28.0         #>  #> loaded via a namespace (and not attached): #>   [1] bitops_1.0-7                rlang_1.1.1                 #>   [3] magrittr_2.0.3              matrixStats_1.0.0           #>   [5] compiler_4.3.1              DelayedMatrixStats_1.22.6   #>   [7] png_0.1-8                   systemfonts_1.0.4           #>   [9] fftwtools_0.9-11            vctrs_0.6.3                 #>  [11] stringr_1.5.0               pkgconfig_2.0.3             #>  [13] SpatialExperiment_1.10.0    crayon_1.5.2                #>  [15] fastmap_1.1.1               magick_2.7.5                #>  [17] XVector_0.40.0              scuttle_1.10.2              #>  [19] labeling_0.4.3              utf8_1.2.3                  #>  [21] rmarkdown_2.24              ragg_1.2.5                  #>  [23] purrr_1.0.2                 bit_4.0.5                   #>  [25] xfun_0.40                   zlibbioc_1.46.0             #>  [27] cachem_1.0.8                beachmat_2.16.0             #>  [29] GenomeInfoDb_1.36.2         jsonlite_1.8.7              #>  [31] highr_0.10                  rhdf5filters_1.12.1         #>  [33] DelayedArray_0.26.7         Rhdf5lib_1.22.0             #>  [35] BiocParallel_1.34.2         jpeg_0.1-10                 #>  [37] tiff_0.1-11                 terra_1.7-39                #>  [39] parallel_4.3.1              R6_2.5.1                    #>  [41] bslib_0.5.1                 stringi_1.7.12              #>  [43] limma_3.56.2                GenomicRanges_1.52.0        #>  [45] jquerylib_0.1.4             Rcpp_1.0.11                 #>  [47] bookdown_0.34               SummarizedExperiment_1.30.2 #>  [49] knitr_1.43                  R.utils_2.12.2              #>  [51] IRanges_2.34.1              Matrix_1.6-0                #>  [53] tidyselect_1.2.0            abind_1.4-5                 #>  [55] yaml_2.3.7                  EBImage_4.42.0              #>  [57] codetools_0.2-19            lattice_0.21-8              #>  [59] tibble_3.2.1                Biobase_2.60.0              #>  [61] withr_2.5.0                 evaluate_0.21               #>  [63] desc_1.4.2                  pillar_1.9.0                #>  [65] BiocManager_1.30.22         MatrixGenerics_1.12.3       #>  [67] stats4_4.3.1                generics_0.1.3              #>  [69] rprojroot_2.0.3             RCurl_1.98-1.12             #>  [71] S4Vectors_0.38.1            sparseMatrixStats_1.12.2    #>  [73] munsell_0.5.0               scales_1.2.1                #>  [75] glue_1.6.2                  tools_4.3.1                 #>  [77] data.table_1.14.8           locfit_1.5-9.8              #>  [79] fs_1.6.3                    rhdf5_2.44.0                #>  [81] grid_4.3.1                  DropletUtils_1.20.0         #>  [83] edgeR_3.42.4                colorspace_2.1-0            #>  [85] SingleCellExperiment_1.22.0 GenomeInfoDbData_1.2.10     #>  [87] HDF5Array_1.28.1            cli_3.6.1                   #>  [89] textshaping_0.3.6           fansi_1.0.4                 #>  [91] S4Arrays_1.0.5              dplyr_1.1.2                 #>  [93] gtable_0.3.4                R.methodsS3_1.8.2           #>  [95] sass_0.4.7                  digest_0.6.33               #>  [97] BiocGenerics_0.46.0         dqrng_0.3.1                 #>  [99] farver_2.1.1                rjson_0.2.21                #> [101] htmlwidgets_1.6.2           memoise_2.0.1               #> [103] htmltools_0.5.6             pkgdown_2.0.7               #> [105] R.oo_1.25.0                 lifecycle_1.0.3             #> [107] bit64_4.0.5"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bárbara Zita Peters Couto. Author. Nicholas Robertson. Author. Ellis Patrick. Author. Shila Ghazanfar. Author, maintainer.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Peters Couto B, Robertson N, Patrick E, Ghazanfar S (2023). MoleculeExperiment: Prioritising molecule-level storage Spatial Transcriptomics Data. R package version 1.1.3, https://github.com/SydneyBioX/MoleculeExperiment.","code":"@Manual{,   title = {MoleculeExperiment: Prioritising a molecule-level storage of Spatial Transcriptomics Data},   author = {Bárbara Zita {Peters Couto} and Nicholas Robertson and Ellis Patrick and Shila Ghazanfar},   year = {2023},   note = {R package version 1.1.3},   url = {https://github.com/SydneyBioX/MoleculeExperiment}, }"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/index.html","id":"moleculeexperiment-","dir":"","previous_headings":"","what":"Prioritising a molecule-level storage of Spatial Transcriptomics Data","title":"Prioritising a molecule-level storage of Spatial Transcriptomics Data","text":"goal MoleculeExperiment provide functionality representation summarisation imaging-based spatial transcriptomics data, including 10X Xenium. MoleculeExperiment take machine output data directly object ready analyses! 🚀 used following data bundles inform readXenium, readCosmx readMerscope functions respectively. particular, Xenium data corresponds 3 replicates fresh frozen mouse brain tissue, accessed 8 February 2023; CosMx data corresponds human non-small cell lung cancer accessed 27 February 2023; MERSCOPE data human ovarian cancer accessed 27 February 2023.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Prioritising a molecule-level storage of Spatial Transcriptomics Data","text":"can install development version MoleculeExperiment GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"SydneyBioX/MoleculeExperiment\")"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/index.html","id":"system-dependencies","dir":"","previous_headings":"Installation","what":"System dependencies","title":"Prioritising a molecule-level storage of Spatial Transcriptomics Data","text":"Note following 3 system dependencies required: * libssl-dev * libmagick++-dev * libgdal-dev","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/MoleculeExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"MoleculeExperiment class: An S4 class container to store imaging-based\nspatial transcriptomics data. — MoleculeExperiment-class","title":"MoleculeExperiment class: An S4 class container to store imaging-based\nspatial transcriptomics data. — MoleculeExperiment-class","text":"class enables analysis imaging-based ST data molecule level, standardises data across vendors. aim class facilitate ST data integration comparison , importantly, facilitate common analytical visualisation workflows.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/MoleculeExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MoleculeExperiment class: An S4 class container to store imaging-based\nspatial transcriptomics data. — MoleculeExperiment-class","text":"","code":"MoleculeExperiment(molecules, boundaries = NULL)"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/MoleculeExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MoleculeExperiment class: An S4 class container to store imaging-based\nspatial transcriptomics data. — MoleculeExperiment-class","text":"molecules Detected transcripts information standardised list format, generated dataframeToMEList() readMolecules() functions. boundaries Slot boundary information standardised list format, generated dataframeToMEList() readBoundaries() functions.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/MoleculeExperiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MoleculeExperiment class: An S4 class container to store imaging-based\nspatial transcriptomics data. — MoleculeExperiment-class","text":"MoleculeExperiment object","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/MoleculeExperiment.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"MoleculeExperiment class: An S4 class container to store imaging-based\nspatial transcriptomics data. — MoleculeExperiment-class","text":"molecules Slot containing information detected transcripts. slot designed list lists, sample contains list tibbles information gene. basic information required slot gene names transcripts, well x y locations. boundaries Slot containing boundaries defining segmented cell. slot designed list lists, sample contains list tibbles cell, consisting x y coordinates polygon vertices defining cell boundary.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/MoleculeExperiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MoleculeExperiment class: An S4 class container to store imaging-based\nspatial transcriptomics data. — MoleculeExperiment-class","text":"","code":"# creating a simple ME object from toy data moleculesDf <- data.frame(     sample_id = rep(c(\"sample1\", \"sample2\"), times = c(30, 20)),     features = rep(c(\"gene1\", \"gene2\"), times = c(20, 30)),     x_coords = runif(50),     y_coords = runif(50) ) boundariesDf <- data.frame(     sample_id = rep(c(\"sample1\", \"sample2\"), times = c(16, 6)),     cell_id = rep(c(\"cell1\", \"cell2\", \"cell3\", \"cell4\",                     \"cell1\", \"cell2\"),                   times = c(4, 4, 4, 4, 3, 3)),     vertex_x = rnorm(22),     vertex_y = rnorm(22) ) moleculesMEList <- dataframeToMEList(moleculesDf,                                   dfType = \"molecules\",                                   assayName = \"detected\",                                   sampleCol = \"sample_id\",                                   factorCol = \"features\",                                   xCol = \"x_coords\",                                   yCol = \"y_coords\")  boundariesMEList <- dataframeToMEList(boundariesDf,                                    dfType = \"boundaries\",                                    assayName = \"cell\",                                    sampleCol = \"sample_id\",                                    factorCol = \"cell_id\",                                    xCol = \"vertex_x\",                                    yCol = \"vertex_y\")  toyME <- MoleculeExperiment(molecules = moleculesMEList,                              boundaries = boundariesMEList)  toyME #> class:  MoleculeExperiment  #> 2 samples: sample1 sample2  #>  #> @molecules contents:  #> -detected assay: #> 2 unique features across all samples in assay detected: gene1 gene2... #> 25 molecules on average across all samples in assay detected #> Location range across all samples in assay \"detected\": [0.01,0.99] x [0.01,0.99] #>  #> @boundaries contents: #> -cell: #> 3 unique segment IDs: cell1 cell2 cell3 cell4 ..."},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor functions to work with MoleculeExperiment objects — accessors","title":"Accessor functions to work with MoleculeExperiment objects — accessors","text":"Accessor functions work MoleculeExperiment objects","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor functions to work with MoleculeExperiment objects — accessors","text":"","code":"# S4 method for MoleculeExperiment molecules(object, assayName = \"detected\", flatten = FALSE)  # S4 method for MoleculeExperiment boundaries(object, assayName = NULL, flatten = FALSE)  # S4 method for MoleculeExperiment features(object, assayName = \"detected\")  # S4 method for MoleculeExperiment segmentIDs(object, assayName = NULL)  # S4 method for MoleculeExperiment molecules(object, assayName = NULL) <- value  # S4 method for MoleculeExperiment boundaries(object, assayName = NULL) <- value"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor functions to work with MoleculeExperiment objects — accessors","text":"object MoleculeExperiment access. assayName Character string specifying name assay retrieve set information slot interest. flatten Logical value specifying whether flatten list data.frame . Defaults FALSE. value New value added slot assay interest.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/accessors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor functions to work with MoleculeExperiment objects — accessors","text":"MoleculeExperiment object slot.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/accessors.html","id":"getters","dir":"Reference","previous_headings":"","what":"getters","title":"Accessor functions to work with MoleculeExperiment objects — accessors","text":"Accessor functions get data MoleculeExperiment object. include: molecules() retrieve information molecules slot. boundaries() retrieve information boundaries slot. features() retrieve feature names molecules slot. segmentIDs() retrieve segment ids boundaries slot.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/accessors.html","id":"setters","dir":"Reference","previous_headings":"","what":"setters","title":"Accessor functions to work with MoleculeExperiment objects — accessors","text":"molecules<- setter accesses molecules slot, whereas boundaries slot can accessed boundaries<-.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/accessors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor functions to work with MoleculeExperiment objects — accessors","text":"","code":"# get example data repoDir <- system.file(\"extdata\", package = \"MoleculeExperiment\") repoDir <- paste0(repoDir, \"/xenium_V1_FF_Mouse_Brain\") me <- readXenium(repoDir,     keepCols = \"essential\",     addBoundaries = \"cell\" )  # get insight into molecules slot showMolecules(me) #> List of 1 #>  $ detected:List of 2 #>   ..$ sample1:List of 137 #>   .. ..$ 2010300C02Rik        : tibble [11 × 2] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Acsbg1               : tibble [6 × 2] (S3: tbl_df/tbl/data.frame) #>   .. .. [list output truncated] #>   ..$ sample2:List of 143 #>   .. ..$ 2010300C02Rik: tibble [9 × 2] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Acsbg1       : tibble [10 × 2] (S3: tbl_df/tbl/data.frame) #>   .. .. [list output truncated]  # for developers, use molecules() getter # expect a large output from call below # molecules(me) # alternatively, return rectangular data structure with flatten = TRUE molecules(me, assayName = \"detected\", flatten = TRUE) #> detected assay transcripts were retrieved. #> ℹ Other transcript assays can be retrieved by specifying the `assayName` #>   argument. #> # A tibble: 1,739 × 4 #>    x_location y_location feature_id    sample_id #>  *      <dbl>      <dbl> <chr>         <chr>     #>  1      4918.      6411. 2010300C02Rik sample1   #>  2      4901.      6417. 2010300C02Rik sample1   #>  3      4901.      6417. 2010300C02Rik sample1   #>  4      4910.      6417. 2010300C02Rik sample1   #>  5      4908.      6413. 2010300C02Rik sample1   #>  6      4911.      6407. 2010300C02Rik sample1   #>  7      4915.      6411. 2010300C02Rik sample1   #>  8      4916.      6412. 2010300C02Rik sample1   #>  9      4901.      6415. 2010300C02Rik sample1   #> 10      4906.      6417. 2010300C02Rik sample1   #> # ℹ 1,729 more rows  # get insight into boundaries slot showBoundaries(me) #> List of 1 #>  $ cell:List of 2 #>   ..$ sample1:List of 5 #>   .. ..$ 67500: tibble [13 × 2] (S3: tbl_df/tbl/data.frame) #>   .. ..$ 67512: tibble [13 × 2] (S3: tbl_df/tbl/data.frame) #>   .. .. [list output truncated] #>   ..$ sample2:List of 9 #>   .. ..$ 65043: tibble [13 × 2] (S3: tbl_df/tbl/data.frame) #>   .. ..$ 65044: tibble [13 × 2] (S3: tbl_df/tbl/data.frame) #>   .. .. [list output truncated]  # for developers, use boundaries() getter # expect a large output from call below # boundaries(me, assayName = \"cell\") # alternatively, return rectangular data structure with flatten = TRUE boundaries(me, assayName = \"cell\", flatten = TRUE) #> cell assay boundaries were retrieved. #> ℹ Other boundary assays can be retrieved by specifying the `assayName` #>   argument. #> # A tibble: 182 × 4 #>    x_location y_location segment_id sample_id #>  *      <dbl>      <dbl> <chr>      <chr>     #>  1      4905.      6400. 67500      sample1   #>  2      4899.      6401. 67500      sample1   #>  3      4894.      6408. 67500      sample1   #>  4      4890.      6418. 67500      sample1   #>  5      4887.      6423. 67500      sample1   #>  6      4887.      6425. 67500      sample1   #>  7      4890.      6427. 67500      sample1   #>  8      4891.      6427. 67500      sample1   #>  9      4894.      6426. 67500      sample1   #> 10      4908.      6421. 67500      sample1   #> # ℹ 172 more rows  # features() getter features(me) #> $sample1 #>   [1] \"2010300C02Rik\"         \"Acsbg1\"                \"Adamts2\"               #>   [4] \"Adamtsl1\"              \"Angpt1\"                \"Aqp4\"                  #>   [7] \"Arc\"                   \"Arhgap12\"              \"Arhgef28\"              #>  [10] \"BLANK_0022\"            \"BLANK_0414\"            \"BLANK_0424\"            #>  [13] \"Bdnf\"                  \"Bhlhe40\"               \"Btbd11\"                #>  [16] \"Cabp7\"                 \"Calb1\"                 \"Calb2\"                 #>  [19] \"Car4\"                  \"Cbln4\"                 \"Ccn2\"                  #>  [22] \"Cdh20\"                 \"Cdh4\"                  \"Cdh6\"                  #>  [25] \"Cdh9\"                  \"Chrm2\"                 \"Clmn\"                  #>  [28] \"Cntn6\"                 \"Cntnap5b\"              \"Cplx3\"                 #>  [31] \"Cpne4\"                 \"Cpne6\"                 \"Crh\"                   #>  [34] \"Cux2\"                  \"Dkk3\"                  \"Dner\"                  #>  [37] \"Dpy19l1\"               \"Epha4\"                 \"Fhod3\"                 #>  [40] \"Fos\"                   \"Gad1\"                  \"Galnt14\"               #>  [43] \"Garnl3\"                \"Gfra2\"                 \"Gjc3\"                  #>  [46] \"Gli3\"                  \"Gng12\"                 \"Gsg1l\"                 #>  [49] \"Gucy1a1\"               \"Hat1\"                  \"Hpcal1\"                #>  [52] \"Id2\"                   \"Igf2\"                  \"Igfbp4\"                #>  [55] \"Igfbp5\"                \"Igfbp6\"                \"Igsf21\"                #>  [58] \"Inpp4b\"                \"Kcnh5\"                 \"Kctd12\"                #>  [61] \"Lamp5\"                 \"Lypd6\"                 \"Lyz2\"                  #>  [64] \"Mapk4\"                 \"Meis2\"                 \"Myl4\"                  #>  [67] \"Myo16\"                 \"Ndst3\"                 \"Necab1\"                #>  [70] \"NegControlProbe_00031\" \"NegControlProbe_00062\" \"Nell1\"                 #>  [73] \"Neto2\"                 \"Neurod6\"               \"Npnt\"                  #>  [76] \"Nrep\"                  \"Nrn1\"                  \"Nrp2\"                  #>  [79] \"Ntsr2\"                 \"Nwd2\"                  \"Opalin\"                #>  [82] \"Orai2\"                 \"Pde11a\"                \"Pde7b\"                 #>  [85] \"Pdzd2\"                 \"Pdzrn3\"                \"Penk\"                  #>  [88] \"Pip5k1b\"               \"Plch1\"                 \"Plcxd2\"                #>  [91] \"Plekha2\"               \"Pou3f1\"                \"Ppp1r1b\"               #>  [94] \"Prdm8\"                 \"Prox1\"                 \"Prr16\"                 #>  [97] \"Pvalb\"                 \"Rasgrf2\"               \"Rasl10a\"               #> [100] \"Rbp4\"                  \"Rfx4\"                  \"Rims3\"                 #> [103] \"Rmst\"                  \"Ror1\"                  \"Rorb\"                  #> [106] \"Rprm\"                  \"Rspo1\"                 \"Satb2\"                 #> [109] \"Sema3a\"                \"Sema6a\"                \"Shisa6\"                #> [112] \"Sipa1l3\"               \"Slc17a6\"               \"Slc17a7\"               #> [115] \"Slc39a12\"              \"Slit2\"                 \"Sncg\"                  #> [118] \"Sorcs3\"                \"Sox10\"                 \"Sox11\"                 #> [121] \"Spi1\"                  \"Strip2\"                \"Syndig1\"               #> [124] \"Syt2\"                  \"Tanc1\"                 \"Thsd7a\"                #> [127] \"Tle4\"                  \"Tmem132d\"              \"Tox\"                   #> [130] \"Trpc4\"                 \"Unc13c\"                \"Vat1l\"                 #> [133] \"Vip\"                   \"Vwc2l\"                 \"Wfs1\"                  #> [136] \"Zfp536\"                \"Zfpm2\"                 #>  #> $sample2 #>   [1] \"2010300C02Rik\" \"Acsbg1\"        \"Adgrl4\"        \"Aldh1a2\"       #>   [5] \"Angpt1\"        \"Aqp4\"          \"Arc\"           \"Arhgap12\"      #>   [9] \"Arhgef28\"      \"BLANK_0077\"    \"BLANK_0120\"    \"BLANK_0129\"    #>  [13] \"BLANK_0471\"    \"Bdnf\"          \"Bhlhe22\"       \"Bhlhe40\"       #>  [17] \"Btbd11\"        \"Calb1\"         \"Car4\"          \"Cbln4\"         #>  [21] \"Cd24a\"         \"Cd93\"          \"Cdh4\"          \"Cdh6\"          #>  [25] \"Chrm2\"         \"Clmn\"          \"Cntnap5b\"      \"Cobll1\"        #>  [29] \"Col6a1\"        \"Cort\"          \"Cplx3\"         \"Cpne4\"         #>  [33] \"Cpne6\"         \"Cpne8\"         \"Cux2\"          \"Dkk3\"          #>  [37] \"Dner\"          \"Dpy19l1\"       \"Ebf3\"          \"Epha4\"         #>  [41] \"Eya4\"          \"Fgd5\"          \"Fhod3\"         \"Fibcd1\"        #>  [45] \"Fn1\"           \"Fos\"           \"Gadd45a\"       \"Galnt14\"       #>  [49] \"Gfra2\"         \"Gjc3\"          \"Gli3\"          \"Gm19410\"       #>  [53] \"Gng12\"         \"Gsg1l\"         \"Gucy1a1\"       \"Hapln1\"        #>  [57] \"Hat1\"          \"Hpcal1\"        \"Htr1f\"         \"Id2\"           #>  [61] \"Igf2\"          \"Igfbp4\"        \"Igfbp5\"        \"Igfbp6\"        #>  [65] \"Igsf21\"        \"Inpp4b\"        \"Kcnh5\"         \"Kctd12\"        #>  [69] \"Lamp5\"         \"Ly6a\"          \"Lyz2\"          \"Mapk4\"         #>  [73] \"Mdga1\"         \"Meis2\"         \"Myo16\"         \"Ndst3\"         #>  [77] \"Necab1\"        \"Nell1\"         \"Neurod6\"       \"Npnt\"          #>  [81] \"Npy2r\"         \"Nrep\"          \"Nrn1\"          \"Nrp2\"          #>  [85] \"Ntsr2\"         \"Nwd2\"          \"Nxph3\"         \"Opalin\"        #>  [89] \"Opn3\"          \"Orai2\"         \"Parm1\"         \"Pde7b\"         #>  [93] \"Pdgfra\"        \"Pdzd2\"         \"Pdzrn3\"        \"Pecam1\"        #>  [97] \"Penk\"          \"Pglyrp1\"       \"Pip5k1b\"       \"Plcxd2\"        #> [101] \"Plcxd3\"        \"Plekha2\"       \"Pou3f1\"        \"Ppp1r1b\"       #> [105] \"Prox1\"         \"Pthlh\"         \"Rasgrf2\"       \"Rasl10a\"       #> [109] \"Rbp4\"          \"Rfx4\"          \"Rims3\"         \"Rmst\"          #> [113] \"Rorb\"          \"Rprm\"          \"Rspo1\"         \"Satb2\"         #> [117] \"Sema3a\"        \"Sema3e\"        \"Sema6a\"        \"Sipa1l3\"       #> [121] \"Slc17a7\"       \"Slc39a12\"      \"Slit2\"         \"Sorcs3\"        #> [125] \"Sox11\"         \"Sox17\"         \"Spp1\"          \"Strip2\"        #> [129] \"Syndig1\"       \"Syt17\"         \"Syt6\"          \"Tanc1\"         #> [133] \"Tle4\"          \"Tmem132d\"      \"Tmem255a\"      \"Tox\"           #> [137] \"Trem2\"         \"Trp73\"         \"Trpc4\"         \"Vat1l\"         #> [141] \"Wfs1\"          \"Zfp536\"        \"Zfpm2\"         #>   # segmentIDs() getter segmentIDs(me, \"cell\") #> $sample1 #> [1] \"67500\" \"67512\" \"67515\" \"67521\" \"67527\" #>  #> $sample2 #> [1] \"65043\" \"65044\" \"65051\" \"65055\" \"65063\" \"65064\" \"65067\" \"65070\" \"65071\" #>   # setter example # read in and standardise nucleus boundaries too nucleiMEList <- readBoundaries(     dataDir = repoDir,     pattern = \"nucleus_boundaries.csv\",     segmentIDCol = \"cell_id\",     xCol = \"vertex_x\",     yCol = \"vertex_y\",     keepCols = \"essential\",     boundariesAssay = \"nucleus\",     scaleFactorVector = 1 )  # use `boundaries<-` setter to add nucleus boundaries to the boundaries slot boundaries(me, \"nucleus\") <- nucleiMEList me #> class:  MoleculeExperiment  #> 2 samples: sample1 sample2  #>  #> @molecules contents:  #> -detected assay: #> 178 unique features across all samples in assay detected: 2010300C02Rik Acsbg1 #> Adamts2 Adamtsl1 Angpt1 Aqp4... #> 869.5 molecules on average across all samples in assay detected #> Location range across all samples in assay \"detected\": [4900,4919.98] x [6400.02,6420] #>  #> @boundaries contents: #> -cell: #> 7 unique segment IDs: 67500 67512 67515 67521 67527 ... #> -nucleus: #> 5 unique segment IDs: 67500 67512 67515 67521 67527 ..."},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/bufferBoundaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new boundaries assay with buffers — bufferBoundaries","title":"Create a new boundaries assay with buffers — bufferBoundaries","text":"function takes existing MoleculeExperiment object generates new boundaries assay added buffers. can useful visualisation countMolecules.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/bufferBoundaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new boundaries assay with buffers — bufferBoundaries","text":"","code":"bufferBoundaries(me, assayName = \"cell\", ...)"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/bufferBoundaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new boundaries assay with buffers — bufferBoundaries","text":"MoleculeExperiment object. assayName Character string (default \"cell\") specifying existing boundaries assay buffer added. ... Arguments pass internal functions. relevant parameter buffer (default 0).","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/bufferBoundaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new boundaries assay with buffers — bufferBoundaries","text":"boundaries assay essential columns vertices added buffer.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/bufferBoundaries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new boundaries assay with buffers — bufferBoundaries","text":"","code":"repoDir <- system.file(\"extdata\", package = \"MoleculeExperiment\") repoDir <- paste0(repoDir, \"/xenium_V1_FF_Mouse_Brain\") me <- readXenium(repoDir,   keepCols = \"essential\" ) MoleculeExperiment::boundaries(me, \"cell_buffer\") <- bufferBoundaries(   me,   assayName = \"cell\", buffer = 1 ) #> cell assay boundaries were retrieved. #> ℹ Other boundary assays can be retrieved by specifying the `assayName` #>   argument.  library(ggplot2) ggplot_me() +   geom_polygon_me(me, assayName = \"cell\", fill = \"grey\") +   geom_polygon_me(me, assayName = \"cell_buffer\", fill = NA, colour = \"red\") +   geom_point_me(me) +   coord_cartesian(     xlim = c(4900, 4919.98),     ylim = c(6400.02, 6420)   ) #> cell assay boundaries were retrieved. #> ℹ Other boundary assays can be retrieved by specifying the `assayName` #>   argument. #> cell_buffer assay boundaries were retrieved. #> ℹ Other boundary assays can be retrieved by specifying the `assayName` #>   argument. #> detected assay transcripts were retrieved. #> ℹ Other transcript assays can be retrieved by specifying the `assayName` #>   argument."},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/countMolecules.html","id":null,"dir":"Reference","previous_headings":"","what":"Count molecules per region of interest (e.g., cell) — countMolecules","title":"Count molecules per region of interest (e.g., cell) — countMolecules","text":"function takes information molecules boundaries slot, counts molecules per region interest. input MoleculeExperiment object, output SpatialExperiment object. way, one interested downstream analyses cell level, one can .","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/countMolecules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count molecules per region of interest (e.g., cell) — countMolecules","text":"","code":"countMolecules(   me,   moleculesAssay = \"detected\",   boundariesAssay = \"cell\",   buffer = 0,   matrixOnly = FALSE,   nCores = 1 )"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/countMolecules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count molecules per region of interest (e.g., cell) — countMolecules","text":"MoleculeExperiment object containing transcript data well boundaries data. .e., \"molecules\" \"boundaries\" slots need filled. See MoleculeExperiment() information. moleculesAssay Character string naming list molecules slot transcript information retrieved . default detected transcript data read creating MoleculeExperiment object. possible change another mode, e.g., \"high_threshold\" access transcript information stored \"high_threshold\" element list molecules slot. boundariesAssay Character string naming list boundaries slot boundary information retrieved . example, counting transcripts per cell, list containing cell boundaries (e.g., \"cell\") selected. buffer Single numeric value (default 0) indicating value buffer beyond segment boundaries, .e. count molecules just outside segment boundary matrixOnly Logical value indicating whether return matrix counted molecules per segment (e.g., cell). FALSE default, .e., default output SpatialExperiment object. nCores Number cores use operation.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/countMolecules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count molecules per region of interest (e.g., cell) — countMolecules","text":"SpatialExperiment object derived MoleculeExperiment object. Alternatively, matrix counted molecules per segment.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/countMolecules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count molecules per region of interest (e.g., cell) — countMolecules","text":"","code":"repoDir <- system.file(\"extdata\", package = \"MoleculeExperiment\") repoDir <- paste0(repoDir, \"/xenium_V1_FF_Mouse_Brain\") me <- readXenium(repoDir,     keepCols = \"essential\" )  spe <- countMolecules(me) #> detected assay transcripts were retrieved. #> ℹ Other transcript assays can be retrieved by specifying the `assayName` #>   argument. #> cell assay boundaries were retrieved. #> ℹ Other boundary assays can be retrieved by specifying the `assayName` #>   argument. spe #> class: SpatialExperiment  #> dim: 178 14  #> metadata(0): #> assays(1): counts #> rownames(178): 2010300C02Rik Acsbg1 ... Zfp536 Zfpm2 #> rowData names(0): #> colnames(14): sample1.67500 sample1.67512 ... sample2.65070 #>   sample2.65071 #> colData names(4): sample_id cell_id x_location y_location #> reducedDimNames(1): spatial #> mainExpName: NULL #> altExpNames(0): #> spatialCoords names(2) : x_location y_location #> imgData names(0):"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/dataframeToMEList.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a transcript (molecule) or boundary dataframe to the ME list format — dataframeToMEList","title":"Convert a transcript (molecule) or boundary dataframe to the ME list format — dataframeToMEList","text":"goal function standardise transcript boundary files input MoleculeExperiment object.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/dataframeToMEList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a transcript (molecule) or boundary dataframe to the ME list format — dataframeToMEList","text":"","code":"dataframeToMEList(   df,   dfType = NULL,   assayName = NULL,   sampleCol = \"sample_id\",   factorCol = NULL,   xCol = \"x_location\",   yCol = \"y_location\",   keepCols = \"essential\",   scaleFactor = 1 )"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/dataframeToMEList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a transcript (molecule) or boundary dataframe to the ME list format — dataframeToMEList","text":"df data.frame containing transcript information boundary information. NOTE: dataframe , minimum, following 4 columns: sample_id, factorCol (e.g., feature_id transcripts, cell_id boundaries), x_location y_location. dfType Character string specifying contents dataframe. Can either \"molecules\" \"boundaries\". assayName Character string specifying name identify information later object. sampleCol Character string specifying name column sample id. factorCol Character string specifying name column factors group data lists. working molecules, column e.g., \"feature_id\" xenium. working boundaries, column e.g., \"cell_id\" xenium. xCol Character string specifying name column global x coordinates. yCol Character string specifying name column global y coordinates. keepCols Character string can either \"essential\" \"\". \"essential\", function work x y location information. scaleFactor Integer specifying scale factor change scale x y locations (e.g., change pixel micron). default value 1.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/dataframeToMEList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a transcript (molecule) or boundary dataframe to the ME list format — dataframeToMEList","text":"list format required input slots MoleculeExperiment object.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/dataframeToMEList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a transcript (molecule) or boundary dataframe to the ME list format — dataframeToMEList","text":"","code":"moleculesDf <- data.frame(     sample_id = rep(c(\"sample1\", \"sample2\"), times = c(30, 20)),     features = rep(c(\"gene1\", \"gene2\"), times = c(20, 30)),     x_coords = runif(50),     y_coords = runif(50) )  moleculesMEList <- dataframeToMEList(moleculesDf,                                   dfType = \"molecules\",                                   assayName = \"detected\",                                   sampleCol = \"sample_id\",                                   factorCol = \"features\",                                   xCol = \"x_coords\",                                   yCol = \"y_coords\")  moleculesMEList #> $detected #> $detected$sample1 #> $detected$sample1$gene1 #> # A tibble: 20 × 2 #>    x_location y_location #>         <dbl>      <dbl> #>  1      0.799     0.776  #>  2      0.465     0.322  #>  3      0.787     0.891  #>  4      0.810     0.114  #>  5      0.444     0.137  #>  6      0.234     0.827  #>  7      0.652     0.0262 #>  8      0.762     0.520  #>  9      0.628     0.896  #> 10      0.376     0.884  #> 11      0.603     0.415  #> 12      0.655     0.309  #> 13      0.515     0.256  #> 14      0.657     0.439  #> 15      0.545     0.725  #> 16      0.956     0.612  #> 17      0.831     0.191  #> 18      0.111     0.213  #> 19      0.228     0.154  #> 20      0.265     0.650  #>  #> $detected$sample1$gene2 #> # A tibble: 10 × 2 #>    x_location y_location #>         <dbl>      <dbl> #>  1     0.398       0.893 #>  2     0.952       0.424 #>  3     0.0759      0.158 #>  4     0.753       0.792 #>  5     0.864       0.284 #>  6     0.548       0.921 #>  7     0.832       0.519 #>  8     0.719       0.432 #>  9     0.893       0.916 #> 10     0.591       0.519 #>  #>  #> $detected$sample2 #> $detected$sample2$gene2 #> # A tibble: 20 × 2 #>    x_location y_location #>         <dbl>      <dbl> #>  1     0.0619     0.0388 #>  2     0.411      0.403  #>  3     0.568      0.244  #>  4     0.548      0.407  #>  5     0.645      0.598  #>  6     0.834      0.191  #>  7     0.551      0.263  #>  8     0.634      0.571  #>  9     0.278      0.268  #> 10     0.540      0.233  #> 11     0.111      0.230  #> 12     0.182      0.129  #> 13     0.164      0.318  #> 14     0.953      0.634  #> 15     0.698      0.979  #> 16     0.448      0.0365 #> 17     0.0141     0.189  #> 18     0.587      0.0332 #> 19     0.616      0.289  #> 20     0.139      0.287  #>  #>  #>"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/dot-generateBPParam.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to generate BPPARAM object. — .generateBPParam","title":"Utility function to generate BPPARAM object. — .generateBPParam","text":"Utility function generate BPPARAM object.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/dot-generateBPParam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to generate BPPARAM object. — .generateBPParam","text":"","code":".generateBPParam(cores = 1)"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/dot-generateBPParam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to generate BPPARAM object. — .generateBPParam","text":"cores Desired number cores BPPARAM object.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/dot-generateBPParam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to generate BPPARAM object. — .generateBPParam","text":"BPPPARAM object.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/plotting-functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting functions for SpatialUtils — plotting-functions","title":"Plotting functions for SpatialUtils — plotting-functions","text":"set ggplot functions build customized plots imaging based spatial transcriptomics data.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/plotting-functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting functions for SpatialUtils — plotting-functions","text":"","code":"ggplot_me()  geom_point_me(me, assayName = \"detected\", byColour = NULL, ...)  geom_polygon_me(me, assayName = \"cell\", byFill = NULL, ...)"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/plotting-functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting functions for SpatialUtils — plotting-functions","text":"MoleculeExperiment object. assayName Character string specifying name assay get data. byColour Character string specifying column name colour . ... Additional parameters passed ggplot. byFill Character string specifying column name fill .","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/plotting-functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting functions for SpatialUtils — plotting-functions","text":"plot transcripts /segmentation information imaging based spatial transcriptomics data.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/plotting-functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting functions for SpatialUtils — plotting-functions","text":"","code":"repoDir <- system.file(\"extdata\", package = \"MoleculeExperiment\") repoDir <- paste0(repoDir, \"/xenium_V1_FF_Mouse_Brain\") me <- readXenium(repoDir,                   keepCols = \"essential\",                   addBoundaries = c(\"cell\", \"nucleus\"))  g = ggplot_me() +         geom_polygon_me(me, byFill = \"segment_id\", colour = \"black\") +         geom_point_me(me, byColour = \"feature_id\", size = 0.1) +         geom_polygon_me(me, assayName = \"nucleus\", fill = NA, colour = \"red\") #> cell assay boundaries were retrieved. #> ℹ Other boundary assays can be retrieved by specifying the `assayName` #>   argument. #> detected assay transcripts were retrieved. #> ℹ Other transcript assays can be retrieved by specifying the `assayName` #>   argument. #> nucleus assay boundaries were retrieved. #> ℹ Other boundary assays can be retrieved by specifying the `assayName` #>   argument. g"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readBoundaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in csv boundary information and convert to ME list format. — readBoundaries","title":"Read in csv boundary information and convert to ME list format. — readBoundaries","text":"function reads csv boundary files converts list format, can added object later . account different coordinate scales possible used boundary versus transcript information, function scales coordinate values boundaries match unit detected transcript locations. various arguments offer flexibility standardise data different molecule-based ST technologies list format.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readBoundaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in csv boundary information and convert to ME list format. — readBoundaries","text":"","code":"readBoundaries(   dataDir,   pattern = NULL,   segmentIDCol = NULL,   xCol = NULL,   yCol = NULL,   keepCols = \"essential\",   boundariesAssay = NULL,   scaleFactorVector = 1 )"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readBoundaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in csv boundary information and convert to ME list format. — readBoundaries","text":"dataDir Path directory containing boundary csv files. pattern Character string specifying unique pattern identify files interest directory. useful work multiple samples. Defaults NULL. segmentIDCol Character string specifying name column containing segment IDs. Defaults NULL. xCol Character string specifying name column containing x coordinates vertices defining boundaries. Defaults NULL. yCol Character string specifying name column containing y coordinates vertices defining boundaries. Defaults NULL. keepCols Character string specifying columns keep. Defaults \"essential\". option select \"\", custom columns specifying names vector. boundariesAssay Character string specifying name identify boundary data object later . Defaults NULL. scaleFactorVector Vector containing scale factor/s change coordinate data pixel micron. can either single integer, multiple scale factors different samples. default value 1.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readBoundaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in csv boundary information and convert to ME list format. — readBoundaries","text":"list containing boundary information. can used input boundaries slot object.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readBoundaries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in csv boundary information and convert to ME list format. — readBoundaries","text":"","code":"repoDir <- system.file(\"extdata\", package = \"MoleculeExperiment\") repoDir <- paste0(repoDir, \"/xenium_V1_FF_Mouse_Brain\") nucleiMEList <- readBoundaries(dataDir = repoDir,                             pattern = \"nucleus_boundaries.csv\",                             segmentIDCol = \"cell_id\",                             xCol = \"vertex_x\",                             yCol = \"vertex_y\",                             keepCols = \"essential\",                             boundariesAssay = \"nucleus\",                             scaleFactorVector = 1) nucleiMEList #> $nucleus #> $nucleus$sample1 #> $nucleus$sample1$`67500` #> # A tibble: 13 × 2 #>    x_location y_location #>         <dbl>      <dbl> #>  1      4900.      6407. #>  2      4898.      6409. #>  3      4897.      6411. #>  4      4898.      6414. #>  5      4899.      6416. #>  6      4900.      6416. #>  7      4902.      6416. #>  8      4905.      6414. #>  9      4906.      6413. #> 10      4905.      6410. #> 11      4904.      6408. #> 12      4902.      6407. #> 13      4900.      6407. #>  #> $nucleus$sample1$`67512` #> # A tibble: 13 × 2 #>    x_location y_location #>         <dbl>      <dbl> #>  1      4909.      6407. #>  2      4907.      6409. #>  3      4907.      6411. #>  4      4908.      6413. #>  5      4910.      6414. #>  6      4913.      6414. #>  7      4913.      6413. #>  8      4914.      6413. #>  9      4914.      6412. #> 10      4912.      6410. #> 11      4911.      6408. #> 12      4909.      6407. #> 13      4909.      6407. #>  #> $nucleus$sample1$`67515` #> # A tibble: 13 × 2 #>    x_location y_location #>         <dbl>      <dbl> #>  1      4912.      6405. #>  2      4910.      6405. #>  3      4909.      6407. #>  4      4913.      6409. #>  5      4913.      6411. #>  6      4914.      6412. #>  7      4915.      6412. #>  8      4915.      6411. #>  9      4917.      6409  #> 10      4917.      6408. #> 11      4915.      6406. #> 12      4913.      6405. #> 13      4912.      6405. #>  #> $nucleus$sample1$`67521` #> # A tibble: 13 × 2 #>    x_location y_location #>         <dbl>      <dbl> #>  1      4918.      6411. #>  2      4917.      6411. #>  3      4916.      6412. #>  4      4914.      6415. #>  5      4914.      6417. #>  6      4916.      6419. #>  7      4917.      6418. #>  8      4918.      6417. #>  9      4920.      6414. #> 10      4920.      6412. #> 11      4919.      6411. #> 12      4918.      6411. #> 13      4918.      6411. #>  #> $nucleus$sample1$`67527` #> # A tibble: 13 × 2 #>    x_location y_location #>         <dbl>      <dbl> #>  1      4921.      6411. #>  2      4920.      6412. #>  3      4920.      6415. #>  4      4919.      6418. #>  5      4919.      6418. #>  6      4921.      6418. #>  7      4922.      6419. #>  8      4923.      6419. #>  9      4924.      6418. #> 10      4924.      6416. #> 11      4923.      6412. #> 12      4922.      6411. #> 13      4921.      6411. #>  #>  #> $nucleus$sample2 #> $nucleus$sample2$`65044` #> # A tibble: 13 × 2 #>    x_location y_location #>         <dbl>      <dbl> #>  1      4904.      6418. #>  2      4902.      6420. #>  3      4902.      6421. #>  4      4902.      6423. #>  5      4902.      6425. #>  6      4903.      6426. #>  7      4906.      6425. #>  8      4908.      6424. #>  9      4908.      6423. #> 10      4908.      6422. #> 11      4907.      6420. #> 12      4905.      6418. #> 13      4904.      6418. #>  #> $nucleus$sample2$`65051` #> # A tibble: 13 × 2 #>    x_location y_location #>         <dbl>      <dbl> #>  1      4919.      6416. #>  2      4917.      6417. #>  3      4915.      6423. #>  4      4915.      6426. #>  5      4916.      6427. #>  6      4917.      6428. #>  7      4919.      6429. #>  8      4920.      6429. #>  9      4922.      6428. #> 10      4924.      6422. #> 11      4923.      6418. #> 12      4920.      6416. #> 13      4919.      6416. #>  #> $nucleus$sample2$`65055` #> # A tibble: 13 × 2 #>    x_location y_location #>         <dbl>      <dbl> #>  1      4909.      6408. #>  2      4907.      6408. #>  3      4904.      6410. #>  4      4902.      6413. #>  5      4903.      6415. #>  6      4906.      6417. #>  7      4906.      6417. #>  8      4910.      6417. #>  9      4911.      6416. #> 10      4912.      6414. #> 11      4912.      6410. #> 12      4910.      6408. #> 13      4909.      6408. #>  #> $nucleus$sample2$`65063` #> # A tibble: 13 × 2 #>    x_location y_location #>         <dbl>      <dbl> #>  1      4923.      6412. #>  2      4922.      6413. #>  3      4921.      6413. #>  4      4920.      6415. #>  5      4920.      6415. #>  6      4922.      6417. #>  7      4924.      6416. #>  8      4925.      6416. #>  9      4927.      6415. #> 10      4927.      6414. #> 11      4927.      6413. #> 12      4926.      6412. #> 13      4923.      6412. #>  #> $nucleus$sample2$`65064` #> # A tibble: 13 × 2 #>    x_location y_location #>         <dbl>      <dbl> #>  1      4898.      6403. #>  2      4896.      6404. #>  3      4894.      6409. #>  4      4894.      6410. #>  5      4895.      6411. #>  6      4896.      6412. #>  7      4898.      6412. #>  8      4899.      6411. #>  9      4900.      6409. #> 10      4901.      6407. #> 11      4901.      6403. #> 12      4899.      6403. #> 13      4898.      6403. #>  #>  #>"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readCosmx.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in Cosmx data (Nanostring) as an ME object. — readCosmx","title":"Read in Cosmx data (Nanostring) as an ME object. — readCosmx","text":"function wrapper around readMolecules function. can read molecule mask information. segmentation masks converted boundaries, added boundaries slot MoleculeExperiment object.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readCosmx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in Cosmx data (Nanostring) as an ME object. — readCosmx","text":"","code":"readCosmx(dataDir, keepCols = \"essential\", addBoundaries = \"cell\")"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readCosmx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in Cosmx data (Nanostring) as an ME object. — readCosmx","text":"dataDir Character string specifying directory Cosmx output files. keepCols Character string specifying columns keep. Defaults \"essential\". option select \"\", custom columns specifying names vector. addBoundaries string specify name boundary assay added object. Can string, NULL. NULL, simple object boundaries created.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readCosmx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in Cosmx data (Nanostring) as an ME object. — readCosmx","text":"MoleculeExperiment object","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readCosmx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in Cosmx data (Nanostring) as an ME object. — readCosmx","text":"","code":"repoDir <- system.file(\"extdata\", package = \"MoleculeExperiment\") repoDir <- paste0(repoDir, \"/nanostring_Lung9_Rep1\") # meCosmx <- readCosmx(repoDir,     keepCols = \"essential\" ) #> ⠙ 1/3 Reading transcripts #> ✔ 1/3 Reading transcripts [99ms] #>  #> ⠙ 2/3 Transforming masks into polygons #> ✔ 2/3 Transforming masks into polygons [70ms] #>  #> ⠙ 3/3 Merging patches #> ✔ 3/3 Merging patches [36ms] #>  meCosmx #> class:  MoleculeExperiment  #> 2 samples: sample_1 sample_2  #>  #> @molecules contents:  #> -detected assay: #> 977 unique features across all samples in assay detected: AATK ABL1 ABL2 ACE #> ACE2 ACKR1... #> 15499.5 molecules on average across all samples in assay detected #> Location range across all samples in assay \"detected\": [924.01,3002] x [26290,26398] #>  #> @boundaries contents: #> -cell: #> 98 unique segment IDs: 1 2 3 4 5 6 ..."},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readMerscope.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in Merscope data to an ME object — readMerscope","title":"Read in Merscope data to an ME object — readMerscope","text":"Reads Merscope (Vizgen) molecule boundary data directory, standardises MoleculeExperiment object.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readMerscope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in Merscope data to an ME object — readMerscope","text":"","code":"readMerscope(dataDir, keepCols = \"essential\", addBoundaries = \"cell\")"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readMerscope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in Merscope data to an ME object — readMerscope","text":"dataDir Character string specifying directory Cosmx output files. keepCols Vector characters specifying columns interest transcripts file. \"essential\" selects columns gene names, x y locations. \"\" select columns. Alternatively, specific colums interest can selected specifying characters vector. Note personalised vector needs contain essential columns. addBoundaries string specify name boundary assay added object. Can string, NULL. NULL, simple object boundaries created.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readMerscope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in Merscope data to an ME object — readMerscope","text":"MoleculeExperiment object","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readMerscope.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in Merscope data to an ME object — readMerscope","text":"","code":"repoDir <- system.file(\"extdata\", package = \"MoleculeExperiment\") repoDir <- paste0(repoDir, \"/vizgen_HumanOvarianCancerPatient2Slice2\") meMerscope <- readMerscope(repoDir,     keepCols = \"essential\",     addBoundaries = \"cell\" ) #> ⠙ 1/2 Reading transcripts #> ✔ 1/2 Reading transcripts [46ms] #>  meMerscope #> class:  MoleculeExperiment  #> 1 samples: vizgen_HumanOvarianCancerPatient2Slice2  #>  #> @molecules contents:  #> -detected assay: #> 486 unique features across all samples in assay detected: ACKR3 ACTA2 ADAMTS4 #> AKT1 AKT2 AKT3... #> 15160 molecules on average across all samples in assay detected #> Location range across all samples in assay \"detected\": [10219.02,10386.83] x [8350.93,8395.3] #>  #> @boundaries contents: #> -cell: #> 24 unique segment IDs: 45862 45865 45872 45873 45882 45887 ..."},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readMolecules.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in detected transcripts file/s into a MoleculeExperiment object — readMolecules","title":"Read in detected transcripts file/s into a MoleculeExperiment object — readMolecules","text":"function standardise transcripts.csv files across different molecule- based ST technologies, store object. technology agnostic, accompanied wrappers specific technologies (e.g., see readXenium).","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readMolecules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in detected transcripts file/s into a MoleculeExperiment object — readMolecules","text":"","code":"readMolecules(   dataDir,   pattern = NULL,   featureCol = NULL,   xCol = NULL,   yCol = NULL,   keepCols = \"essential\",   moleculesAssay = NULL,   scaleFactorVector = 1 )"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readMolecules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in detected transcripts file/s into a MoleculeExperiment object — readMolecules","text":"dataDir Character string specifying directory file/s containing detected transcripts different runs/samples. pattern Character string specifying pattern find transcripts files. example, Xenium data, pattern \"transcripts.csv\". contrast, Cosmx data, pattern \"tx_file\". featureCol Character string specifying name column feature names. example, \"feature_name\" xenium transcripts.csv files. xCol Character string specifying name column x locations transcripts. yCol Character string specifying name column y locations transcripts. keepCols Vector characters specifying columns interest transcripts file. \"essential\" selects columns gene names, x y locations. \"\" select columns. Alternatively, specific colums interest can selected specifying characters vector. Note personalised vector needs contain essential columns. moleculesAssay Character string specifying name list transcript information going stored molecules slot. default name \"detected\", envision MoleculeExperiment usually created raw detected transcript information. scaleFactorVector Vector containing scale factor/s change coordinate data pixel micron. can either single integer, multiple scale factors different samples. default value 1.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readMolecules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in detected transcripts file/s into a MoleculeExperiment object — readMolecules","text":"simple MoleculeExperiment object filled molecules slot.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readMolecules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in detected transcripts file/s into a MoleculeExperiment object — readMolecules","text":"","code":"repoDir <- system.file(\"extdata\", package = \"MoleculeExperiment\") repoDir <- paste0(repoDir, \"/xenium_V1_FF_Mouse_Brain\") simple_me <- readMolecules(repoDir,     pattern = \"transcripts.csv\",     featureCol = \"feature_name\",     xCol = \"x_location\",     yCol = \"y_location\",     keepCols = \"essential\" ) simple_me #> class:  MoleculeExperiment  #> 2 samples: sample1 sample2  #>  #> @molecules contents:  #> -detected assay: #> 178 unique features across all samples in assay detected: 2010300C02Rik Acsbg1 #> Adamts2 Adamtsl1 Angpt1 Aqp4... #> 869.5 molecules on average across all samples in assay detected #> Location range across all samples in assay \"detected\": [4900,4919.98] x [6400.02,6420] #>  #> @boundaries contents: NULL"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readSegMask.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a segmentation mask — readSegMask","title":"Read a segmentation mask — readSegMask","text":"Reads segmentation mask TIFF transforms boundaries object. One must provide either path loaded image object.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readSegMask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a segmentation mask — readSegMask","text":"","code":"readSegMask(   extent,   path = NULL,   image = NULL,   assayName = \"cell\",   background_value = NULL,   sample_id = NULL )"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readSegMask.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a segmentation mask — readSegMask","text":"extent extent loaded segmentation mask micrometers. Used align mask transcripts. must form c(xmin, xmax, ymin, ymax). path path segmenation mask, Default: NULL image loaded image object, Default: NULL assayName name segmentation (e.g. cell, nucleus), Default: 'cell' background_value value corresponding background segmentation, Default: NULL sample_id sample named, Default: NULL","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readSegMask.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a segmentation mask — readSegMask","text":"boundaries object.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readSegMask.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a segmentation mask — readSegMask","text":"","code":"repoDir <- system.file(\"extdata\", package = \"MoleculeExperiment\") segMask <- paste0(repoDir, \"/BIDcell_segmask.tif\") data <- paste0(repoDir, \"/xenium_V1_FF_Mouse_Brain/sample1\") me <- readXenium(data,     keepCols = \"essential\",     addBoundaries = NULL ) boundaries(me, \"BIDcell_segmentation\") <- readSegMask(     extent(me), # use the molecule extent to define the boundary extent     path = segMask, assayName = \"BIDcell_segmentation\",     sample_id = \"sample1\", background_value = 0 ) ggplot_me() +     geom_polygon_me(         me,         assayName = \"BIDcell_segmentation\", fill = NA, colour = \"black\"     ) +     geom_point_me(me, byColour = \"feature_id\", size = 0.1) +     geom_polygon_me(         me,         assayName = \"BIDcell_segmentation\", fill = NA, colour = \"red\"     ) #> BIDcell_segmentation assay boundaries were retrieved. #> ℹ Other boundary assays can be retrieved by specifying the `assayName` #>   argument. #> detected assay transcripts were retrieved. #> ℹ Other transcript assays can be retrieved by specifying the `assayName` #>   argument. #> BIDcell_segmentation assay boundaries were retrieved. #> ℹ Other boundary assays can be retrieved by specifying the `assayName` #>   argument."},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readXenium.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in Xenium data into a MoleculeExperiment object — readXenium","title":"Read in Xenium data into a MoleculeExperiment object — readXenium","text":"Function read , standardise, Xenium output data object. Detected transcripts files required. Additionally, also possible read boundary files (\"cell\", \"nuclei\", ). function wrapper around readMolecules readBoundaries functions.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readXenium.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in Xenium data into a MoleculeExperiment object — readXenium","text":"","code":"readXenium(dataDir, keepCols = \"essential\", addBoundaries = \"cell\")"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readXenium.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in Xenium data into a MoleculeExperiment object — readXenium","text":"dataDir Character string specifying directory xenium output files. keepCols Vector characters specifying columns interest transcripts file boundaries file. Can \"\" \"essential\". \"essential\" selects columns gene names, x y locations transcripts file; \"essential\" selects columns cell ids, x y locations vertices defining boundaries boundaries file. addBoundaries Vector specify names boundary assays added object. Can \"cell\", \"nucleus\", , NULL. latter lead creation simple object just molecules slot filled.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readXenium.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in Xenium data into a MoleculeExperiment object — readXenium","text":"MoleculeExperiment object containing xenium data.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/readXenium.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in Xenium data into a MoleculeExperiment object — readXenium","text":"","code":"repoDir <- system.file(\"extdata\", package = \"MoleculeExperiment\") repoDir <- paste0(repoDir, \"/xenium_V1_FF_Mouse_Brain\")  me <- readXenium(repoDir,                   keepCols = \"essential\") me #> class:  MoleculeExperiment  #> 2 samples: sample1 sample2  #>  #> @molecules contents:  #> -detected assay: #> 178 unique features across all samples in assay detected: 2010300C02Rik Acsbg1 #> Adamts2 Adamtsl1 Angpt1 Aqp4... #> 869.5 molecules on average across all samples in assay detected #> Location range across all samples in assay \"detected\": [4900,4919.98] x [6400.02,6420] #>  #> @boundaries contents: #> -cell: #> 7 unique segment IDs: 67500 67512 67515 67521 67527 ..."},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/small_me.html","id":null,"dir":"Reference","previous_headings":"","what":"A subsetted Xenium dataset include for demostration purposes. — small_me","title":"A subsetted Xenium dataset include for demostration purposes. — small_me","text":"subsetted Xenium dataset include demostration purposes.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/small_me.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A subsetted Xenium dataset include for demostration purposes. — small_me","text":"","code":"data(small_me)"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/small_me.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A subsetted Xenium dataset include for demostration purposes. — small_me","text":"object class MoleculeExperiment length 1.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/summarization.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarization methods to get insights into a MoleculeExperiment object — summarization","title":"Summarization methods to get insights into a MoleculeExperiment object — summarization","text":"following methods useful get quick view contents MoleculeExperiment object. example, showMolecules showBoundaries summarise large nested list lists molecules boundaries slots. nFeatures nTranscripts get numbers features transcripts, respectively. can across samples, per sample.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/summarization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarization methods to get insights into a MoleculeExperiment object — summarization","text":"","code":"# S4 method for MoleculeExperiment showMolecules(object)  # S4 method for MoleculeExperiment extent(object)  # S4 method for MoleculeExperiment showBoundaries(object)  # S4 method for MoleculeExperiment nFeatures(object, assayName = \"detected\", perSample = FALSE)  # S4 method for MoleculeExperiment nTranscripts(object, assayName = \"detected\", perSample = FALSE)"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/summarization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarization methods to get insights into a MoleculeExperiment object — summarization","text":"object Name MoleculeExperiment object interest. assayName Character string specifying name assay view summary contents. perSample Logical value specifying whether summarize information per sample.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/summarization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarization methods to get insights into a MoleculeExperiment object — summarization","text":"MoleculeExperiment object summary.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/reference/summarization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarization methods to get insights into a MoleculeExperiment object — summarization","text":"","code":"# get example data repoDir <- system.file(\"extdata\", package = \"MoleculeExperiment\") repoDir <- paste0(repoDir, \"/xenium_V1_FF_Mouse_Brain\") me <- readXenium(repoDir,     keepCols = \"essential\",     addBoundaries = \"cell\" )  showMolecules(me) #> List of 1 #>  $ detected:List of 2 #>   ..$ sample1:List of 137 #>   .. ..$ 2010300C02Rik        : tibble [11 × 2] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Acsbg1               : tibble [6 × 2] (S3: tbl_df/tbl/data.frame) #>   .. .. [list output truncated] #>   ..$ sample2:List of 143 #>   .. ..$ 2010300C02Rik: tibble [9 × 2] (S3: tbl_df/tbl/data.frame) #>   .. ..$ Acsbg1       : tibble [10 × 2] (S3: tbl_df/tbl/data.frame) #>   .. .. [list output truncated] showBoundaries(me) #> List of 1 #>  $ cell:List of 2 #>   ..$ sample1:List of 5 #>   .. ..$ 67500: tibble [13 × 2] (S3: tbl_df/tbl/data.frame) #>   .. ..$ 67512: tibble [13 × 2] (S3: tbl_df/tbl/data.frame) #>   .. .. [list output truncated] #>   ..$ sample2:List of 9 #>   .. ..$ 65043: tibble [13 × 2] (S3: tbl_df/tbl/data.frame) #>   .. ..$ 65044: tibble [13 × 2] (S3: tbl_df/tbl/data.frame) #>   .. .. [list output truncated]  nFeatures(me) #> 178 unique features across all samples in assay detected: 2010300C02Rik Acsbg1 #> Adamts2 Adamtsl1 Angpt1 Aqp4... #> [1] 178 nFeatures(me, perSample = TRUE) #> sample1 sample2  #>     137     143   nTranscripts(me) #> 869.5 molecules on average across all samples in assay detected nTranscripts(me, perSample = TRUE) #> sample1 sample2  #>     962     777"},{"path":"https://sydneybiox.github.io/MoleculeExperiment/news/index.html","id":"moleculeexperiment-v113-2023-08-22","dir":"Changelog","previous_headings":"","what":"MoleculeExperiment v1.1.3 (2023-08-22)","title":"MoleculeExperiment v1.1.3 (2023-08-22)","text":"feature_name called feature_id consistency segment_id.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/news/index.html","id":"moleculeexperiment-v112-2023-07-26","dir":"Changelog","previous_headings":"","what":"MoleculeExperiment v1.1.2 (2023-07-26)","title":"MoleculeExperiment v1.1.2 (2023-07-26)","text":"IMPORTANT: readCosmx readMerscope can now also handle reading standardising boundary information!!","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/news/index.html","id":"moleculeexperiment-v0996-2023-04-26","dir":"Changelog","previous_headings":"","what":"MoleculeExperiment v0.99.6 (2023-04-26)","title":"MoleculeExperiment v0.99.6 (2023-04-26)","text":"Made readCosmx readMerscope available user. Note: functions currently handle transcript files, boundaries.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/news/index.html","id":"moleculeexperiment-v0995-2023-04-17","dir":"Changelog","previous_headings":"","what":"MoleculeExperiment v0.99.5 (2023-04-17)","title":"MoleculeExperiment v0.99.5 (2023-04-17)","text":"Implemented review feedback Bioconductor submission.","code":""},{"path":"https://sydneybiox.github.io/MoleculeExperiment/news/index.html","id":"moleculeexperiment-v0990-2023-03-30","dir":"Changelog","previous_headings":"","what":"MoleculeExperiment v0.99.0 (2023-03-30)","title":"MoleculeExperiment v0.99.0 (2023-03-30)","text":"Submitted Bioconductor.","code":""}]
